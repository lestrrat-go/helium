// WARNING: This file is generated by gencbsax.pl
package sax

import (
	"context"
	"errors"
)

// ErrHandlerUnspecified is returned when there is no Handler
// registered for that particular event callback. This is not
// a fatal error per se, and can be ignored if the implementation
// chooses to do so.
var ErrHandlerUnspecified = errors.New("handler unspecified")

// SAX2Handler is an interface for anything that can satisfy
// helium's expected SAX2 API
type SAX2Handler interface {
	AttributeDecl(ctx context.Context, saxctx Context, elem string, fullname string, typ int, def int, defaultValue string, tree Enumeration) error
	CDataBlock(ctx context.Context, saxctx Context, value []byte) error
	Characters(ctx context.Context, saxctx Context, ch []byte) error
	Comment(ctx context.Context, saxctx Context, value []byte) error
	ElementDecl(ctx context.Context, saxctx Context, name string, typ int, content ElementContent) error
	EndDocument(ctx context.Context, saxctx Context) error
	EndElementNS(ctx context.Context, saxctx Context, localname string, prefix string, uri string) error
	EntityDecl(ctx context.Context, saxctx Context, name string, typ int, publicID string, systemID string, content string) error
	Error(ctx context.Context, saxctx Context, message string, args ...interface{}) error
	ExternalSubset(ctx context.Context, saxctx Context, name string, externalID string, systemID string) error
	GetEntity(ctx context.Context, saxctx Context, name string) (Entity, error)
	GetParameterEntity(ctx context.Context, saxctx Context, name string) (Entity, error)
	HasExternalSubset(ctx context.Context, saxctx Context) (bool, error)
	HasInternalSubset(ctx context.Context, saxctx Context) (bool, error)
	IgnorableWhitespace(ctx context.Context, saxctx Context, ch []byte) error
	InternalSubset(ctx context.Context, saxctx Context, name string, externalID string, systemID string) error
	IsStandalone(ctx context.Context, saxctx Context) (bool, error)
	NotationDecl(ctx context.Context, saxctx Context, name string, publicID string, systemID string) error
	ProcessingInstruction(ctx context.Context, saxctx Context, target string, data string) error
	Reference(ctx context.Context, saxctx Context, name string) error
	ResolveEntity(ctx context.Context, saxctx Context, publicID string, systemID string) (ParseInput, error)
	SetDocumentLocator(ctx context.Context, saxctx Context, locator DocumentLocator) error
	StartDocument(ctx context.Context, saxctx Context) error
	StartElementNS(ctx context.Context, saxctx Context, localname string, prefix string, uri string, namespaces []Namespace, attrs []Attribute) error
	UnparsedEntityDecl(ctx context.Context, saxctx Context, name string, publicID string, systemID string, notationName string) error
}

// SAX2 is the callback based SAX2 handler.
type SAX2 struct {
	AttributeDeclHandler AttributeDeclFunc
	CDataBlockHandler CDataBlockFunc
	CharactersHandler CharactersFunc
	CommentHandler CommentFunc
	ElementDeclHandler ElementDeclFunc
	EndDocumentHandler EndDocumentFunc
	EndElementNSHandler EndElementNSFunc
	EntityDeclHandler EntityDeclFunc
	ErrorHandler ErrorFunc
	ExternalSubsetHandler ExternalSubsetFunc
	GetEntityHandler GetEntityFunc
	GetParameterEntityHandler GetParameterEntityFunc
	HasExternalSubsetHandler HasExternalSubsetFunc
	HasInternalSubsetHandler HasInternalSubsetFunc
	IgnorableWhitespaceHandler IgnorableWhitespaceFunc
	InternalSubsetHandler InternalSubsetFunc
	IsStandaloneHandler IsStandaloneFunc
	NotationDeclHandler NotationDeclFunc
	ProcessingInstructionHandler ProcessingInstructionFunc
	ReferenceHandler ReferenceFunc
	ResolveEntityHandler ResolveEntityFunc
	SetDocumentLocatorHandler SetDocumentLocatorFunc
	StartDocumentHandler StartDocumentFunc
	StartElementNSHandler StartElementNSFunc
	UnparsedEntityDeclHandler UnparsedEntityDeclFunc
}

// New creates a new instance of SAX2. All callbacks are
// uninitialized.
func New() *SAX2 {
	return &SAX2{}
}

func (s SAX2) AttributeDecl(ctx context.Context, saxctx Context, elem string, fullname string, typ int, def int, defaultValue string, tree Enumeration) error {
	if h := s.AttributeDeclHandler; h != nil {
		return h(ctx, saxctx, elem, fullname, typ, def, defaultValue, tree)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) CDataBlock(ctx context.Context, saxctx Context, value []byte) error {
	if h := s.CDataBlockHandler; h != nil {
		return h(ctx, saxctx, value)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) Characters(ctx context.Context, saxctx Context, ch []byte) error {
	if h := s.CharactersHandler; h != nil {
		return h(ctx, saxctx, ch)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) Comment(ctx context.Context, saxctx Context, value []byte) error {
	if h := s.CommentHandler; h != nil {
		return h(ctx, saxctx, value)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) ElementDecl(ctx context.Context, saxctx Context, name string, typ int, content ElementContent) error {
	if h := s.ElementDeclHandler; h != nil {
		return h(ctx, saxctx, name, typ, content)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) EndDocument(ctx context.Context, saxctx Context) error {
	if h := s.EndDocumentHandler; h != nil {
		return h(ctx, saxctx)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) EndElementNS(ctx context.Context, saxctx Context, localname string, prefix string, uri string) error {
	if h := s.EndElementNSHandler; h != nil {
		return h(ctx, saxctx, localname, prefix, uri)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) EntityDecl(ctx context.Context, saxctx Context, name string, typ int, publicID string, systemID string, content string) error {
	if h := s.EntityDeclHandler; h != nil {
		return h(ctx, saxctx, name, typ, publicID, systemID, content)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) Error(ctx context.Context, saxctx Context, message string, args ...interface{}) error {
	if h := s.ErrorHandler; h != nil {
		return h(ctx, saxctx, message, args)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) ExternalSubset(ctx context.Context, saxctx Context, name string, externalID string, systemID string) error {
	if h := s.ExternalSubsetHandler; h != nil {
		return h(ctx, saxctx, name, externalID, systemID)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) GetEntity(ctx context.Context, saxctx Context, name string) (Entity, error) {
	if h := s.GetEntityHandler; h != nil {
		return h(ctx, saxctx, name)
	}
	return nil, ErrHandlerUnspecified;
}

func (s SAX2) GetParameterEntity(ctx context.Context, saxctx Context, name string) (Entity, error) {
	if h := s.GetParameterEntityHandler; h != nil {
		return h(ctx, saxctx, name)
	}
	return nil, ErrHandlerUnspecified;
}

func (s SAX2) HasExternalSubset(ctx context.Context, saxctx Context) (bool, error) {
	if h := s.HasExternalSubsetHandler; h != nil {
		return h(ctx, saxctx)
	}
	return false, ErrHandlerUnspecified;
}

func (s SAX2) HasInternalSubset(ctx context.Context, saxctx Context) (bool, error) {
	if h := s.HasInternalSubsetHandler; h != nil {
		return h(ctx, saxctx)
	}
	return false, ErrHandlerUnspecified;
}

func (s SAX2) IgnorableWhitespace(ctx context.Context, saxctx Context, ch []byte) error {
	if h := s.IgnorableWhitespaceHandler; h != nil {
		return h(ctx, saxctx, ch)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) InternalSubset(ctx context.Context, saxctx Context, name string, externalID string, systemID string) error {
	if h := s.InternalSubsetHandler; h != nil {
		return h(ctx, saxctx, name, externalID, systemID)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) IsStandalone(ctx context.Context, saxctx Context) (bool, error) {
	if h := s.IsStandaloneHandler; h != nil {
		return h(ctx, saxctx)
	}
	return false, ErrHandlerUnspecified;
}

func (s SAX2) NotationDecl(ctx context.Context, saxctx Context, name string, publicID string, systemID string) error {
	if h := s.NotationDeclHandler; h != nil {
		return h(ctx, saxctx, name, publicID, systemID)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) ProcessingInstruction(ctx context.Context, saxctx Context, target string, data string) error {
	if h := s.ProcessingInstructionHandler; h != nil {
		return h(ctx, saxctx, target, data)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) Reference(ctx context.Context, saxctx Context, name string) error {
	if h := s.ReferenceHandler; h != nil {
		return h(ctx, saxctx, name)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) ResolveEntity(ctx context.Context, saxctx Context, publicID string, systemID string) (ParseInput, error) {
	if h := s.ResolveEntityHandler; h != nil {
		return h(ctx, saxctx, publicID, systemID)
	}
	return nil, ErrHandlerUnspecified;
}

func (s SAX2) SetDocumentLocator(ctx context.Context, saxctx Context, locator DocumentLocator) error {
	if h := s.SetDocumentLocatorHandler; h != nil {
		return h(ctx, saxctx, locator)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) StartDocument(ctx context.Context, saxctx Context) error {
	if h := s.StartDocumentHandler; h != nil {
		return h(ctx, saxctx)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) StartElementNS(ctx context.Context, saxctx Context, localname string, prefix string, uri string, namespaces []Namespace, attrs []Attribute) error {
	if h := s.StartElementNSHandler; h != nil {
		return h(ctx, saxctx, localname, prefix, uri, namespaces, attrs)
	}
	return ErrHandlerUnspecified;
}

func (s SAX2) UnparsedEntityDecl(ctx context.Context, saxctx Context, name string, publicID string, systemID string, notationName string) error {
	if h := s.UnparsedEntityDeclHandler; h != nil {
		return h(ctx, saxctx, name, publicID, systemID, notationName)
	}
	return ErrHandlerUnspecified;
}

