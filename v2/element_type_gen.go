// Code generated by "stringer -type ElementType -output element_type_gen.go"; DO NOT EDIT.

package helium

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ElementNode-1]
	_ = x[AttributeNode-2]
	_ = x[TextNode-3]
	_ = x[CDATASectionNode-4]
	_ = x[EntityRefNode-5]
	_ = x[EntityNode-6]
	_ = x[ProcessingInstructionNode-7]
	_ = x[CommentNode-8]
	_ = x[DocumentNode-9]
	_ = x[DocumentTypeNode-10]
	_ = x[DocumentFragNode-11]
	_ = x[NotationNode-12]
	_ = x[HTMLDocumentNode-13]
	_ = x[DTDNode-14]
	_ = x[ElementDeclNode-15]
	_ = x[AttributeDeclNode-16]
	_ = x[EntityDeclNode-17]
	_ = x[NamespaceDeclNode-18]
	_ = x[XIncludeStartNode-19]
	_ = x[XIncludeEndNode-20]
	_ = x[NamespaceNode-21]
}

const _ElementType_name = "ElementNodeAttributeNodeTextNodeCDATASectionNodeEntityRefNodeEntityNodeProcessingInstructionNodeCommentNodeDocumentNodeDocumentTypeNodeDocumentFragNodeNotationNodeHTMLDocumentNodeDTDNodeElementDeclNodeAttributeDeclNodeEntityDeclNodeNamespaceDeclNodeXIncludeStartNodeXIncludeEndNodeNamespaceNode"

var _ElementType_index = [...]uint16{0, 11, 24, 32, 48, 61, 71, 96, 107, 119, 135, 151, 163, 179, 186, 201, 218, 232, 249, 266, 281, 294}

func (i ElementType) String() string {
	i -= 1
	if i < 0 || i >= ElementType(len(_ElementType_index)-1) {
		return "ElementType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ElementType_name[_ElementType_index[i]:_ElementType_index[i+1]]
}
