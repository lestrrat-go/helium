// This file is auto-generated by internal/cmd/genhandler/main.go. DO NOT EDIT

package sax

type sax2 struct {
	attributeDecl         AttributeDeclHandler
	cDataBlock            CDataBlockHandler
	characters            CharactersHandler
	comment               CommentHandler
	endDocument           EndDocumentHandler
	endElementNS          EndElementNSHandler
	entityDecl            EntityDeclHandler
	error                 ErrorHandler
	externalSubset        ExternalSubsetHandler
	getEntity             GetEntityHandler
	getParameterEntity    GetParameterEntityHandler
	hasExternalSubset     HasExternalSubsetHandler
	hasInternalSubset     HasInternalSubsetHandler
	ignorableWhitespace   IgnorableWhitespaceHandler
	internalSubset        InternalSubsetHandler
	isStandalone          IsStandaloneHandler
	notationDecl          NotationDeclHandler
	processingInstruction ProcessingInstructionHandler
	reference             ReferenceHandler
	resolveEntity         ResolveEntityHandler
	setDocumentLocator    SetDocumentLocatorHandler
	startDocument         StartDocumentHandler
	startElementNS        StartElementNSHandler
	unparsedEntityDecl    UnparsedEntityDeclHandler
}

var _ Handler = &sax2{}

// SAX2 creates a new instance of a generic SAX2 handler from the
// provided handler object.
//
// The new object will delegate work to the original handler where
// appropriate, and for everything else that is not implemented it will
// return a ErrHandlerUnimplemented error
func SAX2(v interface{}) Handler {
	s := &sax2{}
	if h, ok := v.(AttributeDeclHandler); ok {
		s.attributeDecl = h
	}
	if h, ok := v.(CDataBlockHandler); ok {
		s.cDataBlock = h
	}
	if h, ok := v.(CharactersHandler); ok {
		s.characters = h
	}
	if h, ok := v.(CommentHandler); ok {
		s.comment = h
	}
	if h, ok := v.(EndDocumentHandler); ok {
		s.endDocument = h
	}
	if h, ok := v.(EndElementNSHandler); ok {
		s.endElementNS = h
	}
	if h, ok := v.(EntityDeclHandler); ok {
		s.entityDecl = h
	}
	if h, ok := v.(ErrorHandler); ok {
		s.error = h
	}
	if h, ok := v.(ExternalSubsetHandler); ok {
		s.externalSubset = h
	}
	if h, ok := v.(GetEntityHandler); ok {
		s.getEntity = h
	}
	if h, ok := v.(GetParameterEntityHandler); ok {
		s.getParameterEntity = h
	}
	if h, ok := v.(HasExternalSubsetHandler); ok {
		s.hasExternalSubset = h
	}
	if h, ok := v.(HasInternalSubsetHandler); ok {
		s.hasInternalSubset = h
	}
	if h, ok := v.(IgnorableWhitespaceHandler); ok {
		s.ignorableWhitespace = h
	}
	if h, ok := v.(InternalSubsetHandler); ok {
		s.internalSubset = h
	}
	if h, ok := v.(IsStandaloneHandler); ok {
		s.isStandalone = h
	}
	if h, ok := v.(NotationDeclHandler); ok {
		s.notationDecl = h
	}
	if h, ok := v.(ProcessingInstructionHandler); ok {
		s.processingInstruction = h
	}
	if h, ok := v.(ReferenceHandler); ok {
		s.reference = h
	}
	if h, ok := v.(ResolveEntityHandler); ok {
		s.resolveEntity = h
	}
	if h, ok := v.(SetDocumentLocatorHandler); ok {
		s.setDocumentLocator = h
	}
	if h, ok := v.(StartDocumentHandler); ok {
		s.startDocument = h
	}
	if h, ok := v.(StartElementNSHandler); ok {
		s.startElementNS = h
	}
	if h, ok := v.(UnparsedEntityDeclHandler); ok {
		s.unparsedEntityDecl = h
	}
	return s
}

func (s *sax2) AttributeDecl(ud UserData, elem string, fullname string, typ int, def int, defaultValue string, tree Enumeration) error {
	if h := s.attributeDecl; h != nil {
		return h.AttributeDecl(ud, elem, fullname, typ, def, defaultValue, tree)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) CDataBlock(ud UserData, value []byte) error {
	if h := s.cDataBlock; h != nil {
		return h.CDataBlock(ud, value)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) Characters(ud UserData, ch []byte) error {
	if h := s.characters; h != nil {
		return h.Characters(ud, ch)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) Comment(ud UserData, value []byte) error {
	if h := s.comment; h != nil {
		return h.Comment(ud, value)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) EndDocument(ud UserData) error {
	if h := s.endDocument; h != nil {
		return h.EndDocument(ud)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) EndElementNS(ud UserData, localname string, prefix string, uri string) error {
	if h := s.endElementNS; h != nil {
		return h.EndElementNS(ud, localname, prefix, uri)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) EntityDecl(ud UserData, name string, typ int, publicID string, sysytemID string, content string) error {
	if h := s.entityDecl; h != nil {
		return h.EntityDecl(ud, name, typ, publicID, sysytemID, content)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) Error(ud UserData, message string, args ...interface{}) error {
	if h := s.error; h != nil {
		return h.Error(ud, message, args)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) ExternalSubset(ud UserData, name string, externalID string, systemID string) error {
	if h := s.externalSubset; h != nil {
		return h.ExternalSubset(ud, name, externalID, systemID)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) GetEntity(ud UserData, name string) (Entity, error) {
	if h := s.getEntity; h != nil {
		return h.GetEntity(ud, name)
	}
	return nil, ErrHandlerUnimplemented
}

func (s *sax2) GetParameterEntity(ud UserData, name string) (Entity, error) {
	if h := s.getParameterEntity; h != nil {
		return h.GetParameterEntity(ud, name)
	}
	return nil, ErrHandlerUnimplemented
}

func (s *sax2) HasExternalSubset(ud UserData) (bool, error) {
	if h := s.hasExternalSubset; h != nil {
		return h.HasExternalSubset(ud)
	}
	return false, ErrHandlerUnimplemented
}

func (s *sax2) HasInternalSubset(ud UserData) (bool, error) {
	if h := s.hasInternalSubset; h != nil {
		return h.HasInternalSubset(ud)
	}
	return false, ErrHandlerUnimplemented
}

func (s *sax2) IgnorableWhitespace(ud UserData, ch []byte) error {
	if h := s.ignorableWhitespace; h != nil {
		return h.IgnorableWhitespace(ud, ch)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) InternalSubset(ud UserData, name string, externalID string, systemID string) error {
	if h := s.internalSubset; h != nil {
		return h.InternalSubset(ud, name, externalID, systemID)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) IsStandalone(ud UserData) (bool, error) {
	if h := s.isStandalone; h != nil {
		return h.IsStandalone(ud)
	}
	return false, ErrHandlerUnimplemented
}

func (s *sax2) NotationDecl(ud UserData, name string, publicID string, systemID string) error {
	if h := s.notationDecl; h != nil {
		return h.NotationDecl(ud, name, publicID, systemID)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) ProcessingInstruction(ud UserData, target string, data string) error {
	if h := s.processingInstruction; h != nil {
		return h.ProcessingInstruction(ud, target, data)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) Reference(ud UserData, name string) error {
	if h := s.reference; h != nil {
		return h.Reference(ud, name)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) ResolveEntity(ud UserData, publicID string, systemID string) (ParseInput, error) {
	if h := s.resolveEntity; h != nil {
		return h.ResolveEntity(ud, publicID, systemID)
	}
	return nil, ErrHandlerUnimplemented
}

func (s *sax2) SetDocumentLocator(ud UserData, locator DocumentLocator) error {
	if h := s.setDocumentLocator; h != nil {
		return h.SetDocumentLocator(ud, locator)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) StartDocument(ud UserData) error {
	if h := s.startDocument; h != nil {
		return h.StartDocument(ud)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) StartElementNS(ud UserData, localname string, prefix string, uri string, namespaces []Namespace, attributes []Attribute) error {
	if h := s.startElementNS; h != nil {
		return h.StartElementNS(ud, localname, prefix, uri, namespaces, attributes)
	}
	return ErrHandlerUnimplemented
}

func (s *sax2) UnparsedEntityDecl(ud UserData, name string, publicID string, systemID string, notationName string) error {
	if h := s.unparsedEntityDecl; h != nil {
		return h.UnparsedEntityDecl(ud, name, publicID, systemID, notationName)
	}
	return ErrHandlerUnimplemented
}
